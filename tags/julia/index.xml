<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>julia on Jukka Aho (@ahojukka5)</title>
    <link>https://ahojukka5.github.io/tags/julia/</link>
    <description>Recent content in julia on Jukka Aho (@ahojukka5)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright © 2020, @ahojukka5</copyright>
    <lastBuildDate>Fri, 19 Jun 2020 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://ahojukka5.github.io/tags/julia/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Metaohjelmointia Julialla: symbolinen derivointi</title>
      <link>https://ahojukka5.github.io/2020/2020-06-19-julia-metaprogramming-symbolic-differentiation/</link>
      <pubDate>Fri, 19 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ahojukka5.github.io/2020/2020-06-19-julia-metaprogramming-symbolic-differentiation/</guid>
      <description>&lt;p&gt;Esittelen seuraavaksi erään ihan todellisen käyttötapauksen, missä makrojen
käytöstä voi olla todellista hyötyä. Kuvitellaan tilannetta, missä meillä on
olemassa jokin analyyttinen funktio, yksinkertaisuuden vuoksi polynomi. Haluamme
laskea tämän polynomin analyyttisiä derivaattoja nopeasti. Toteutetaan
yksinkertainen CAS-laskin, joka osaa derivoida polynomeja. Käytän tässä pohjana
John Myles Whiten &lt;a href=&#34;http://www.johnmyleswhite.com/notebook/2013/01/07/symbolic-differentiation-in-julia/&#34;&gt;blogikirjoitusta&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Julian makrot</title>
      <link>https://ahojukka5.github.io/2020/2020-06-18-julia-metaprogramming-macros/</link>
      <pubDate>Thu, 18 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ahojukka5.github.io/2020/2020-06-18-julia-metaprogramming-macros/</guid>
      <description>&lt;p&gt;Eräs hieno ominaisuus Juliassa on sen makrot. Juliassa makro on hieman funktion
kaltainen rakenne, joka palauttaa Expr-tyypin joka suoritetaan makron päätyttyä.
Makroa voi ajatella ikääneräänlaisena esikäsittelijänä, jolla voi muokata koodin
rakennetta ennenkuin se itse asiassa suoritetaan.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Algoritmien benchmarkkaaminen Julialla</title>
      <link>https://ahojukka5.github.io/2020/2020-06-16-benchmarking-algorithms-in-julia/</link>
      <pubDate>Tue, 16 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ahojukka5.github.io/2020/2020-06-16-benchmarking-algorithms-in-julia/</guid>
      <description>&lt;p&gt;Funktioiden benchmarkkaaminen Juliassa on tehty helpoksi erikseen asennttavalla
BenchmarkTools-paketilla. Tarkastellaan seuraavanlaista ongelmaa: käyttäjälle
annetaan kokonaislukulista &lt;code&gt;arr&lt;/code&gt;, ja yksittäinen luku &lt;code&gt;target&lt;/code&gt;. Implementoi
funktio, joka palauttaa indeksiparin &lt;code&gt;(i, j)&lt;/code&gt; siten, että listan alkioiden summa
on &lt;code&gt;target&lt;/code&gt;, siis &lt;code&gt;arr[i] + arr[j] = target&lt;/code&gt;. Kannattaa käyttää hetki aikaa ja
miettiä ratkaisua.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
